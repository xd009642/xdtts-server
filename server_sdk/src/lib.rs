//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: pavex_matchit::Router<u32>,
    application_state: ApplicationState,
}
pub struct ApplicationState {
    s0: app::routes::tts::TtsContext,
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {
    #[error(transparent)]
    TtsContextNew(anyhow::Error),
}
pub async fn build_application_state() -> Result<
    crate::ApplicationState,
    crate::ApplicationStateError,
> {
    let v0 = app::routes::tts::TtsContext::new();
    let v1 = match v0 {
        Ok(ok) => ok,
        Err(v1) => {
            return {
                let v2 = crate::ApplicationStateError::TtsContextNew(v1);
                core::result::Result::Err(v2)
            };
        }
    };
    let v2 = crate::ApplicationState { s0: v1 };
    core::result::Result::Ok(v2)
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    let server_state = std::sync::Arc::new(ServerState {
        router: build_router(),
        application_state,
    });
    server_builder.serve(route_request, server_state)
}
fn build_router() -> pavex_matchit::Router<u32> {
    let mut router = pavex_matchit::Router::new();
    router.insert("/api/v1/generate", 0u32).unwrap();
    router
}
async fn route_request(
    request: http::Request<hyper::body::Incoming>,
    _connection_info: Option<pavex::connection::ConnectionInfo>,
    server_state: std::sync::Arc<ServerState>,
) -> pavex::response::Response {
    let (request_head, request_body) = request.into_parts();
    #[allow(unused)]
    let request_body = pavex::request::body::RawIncomingBody::from(request_body);
    let request_head: pavex::request::RequestHead = request_head.into();
    let matched_route = match server_state.router.at(&request_head.target.path()) {
        Ok(m) => m,
        Err(_) => {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_1::entrypoint(
                    &request_head,
                    matched_route_template,
                    &allowed_methods,
                )
                .await;
        }
    };
    let route_id = matched_route.value;
    #[allow(unused)]
    let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
        .params
        .into();
    match route_id {
        0u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/api/v1/generate",
            );
            match &request_head.method {
                &pavex::http::Method::POST => {
                    route_0::entrypoint(
                            &server_state.application_state.s0,
                            request_body,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::POST,
                        ])
                        .into();
                    route_1::entrypoint(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        i => unreachable!("Unknown route id: {}", i),
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a app::routes::tts::TtsContext,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b app::routes::tts::TtsContext,
        s_3: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex::request::RequestHead,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c app::routes::tts::TtsContext,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2, s_3).await;
        let response = post_processing_0(response, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: &app::routes::tts::TtsContext,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_0::Next0 {
            s_0: v3,
            s_1: v1,
            s_2: v0,
            s_3: v2,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: &app::routes::tts::TtsContext,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v3, v2, v4);
        let v6 = crate::route_0::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v1,
            s_3: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
        v2: pavex::request::body::RawIncomingBody,
        v3: &app::routes::tts::TtsContext,
    ) -> pavex::response::Response {
        let v4 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v5 = pavex::request::body::BufferedBody::extract(v0, v2, v4).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::request::body::JsonBody::extract(v0, &v6);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = app::routes::tts::TtsContext::generate(v3, &v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b app::routes::tts::TtsContext,
        s_3: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            &'b app::routes::tts::TtsContext,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::request::RequestHead,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c app::routes::tts::TtsContext,
        next: fn(
            &'a pavex::request::RequestHead,
            &'b pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'c app::routes::tts::TtsContext,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = handler(s_0).await;
        let response = post_processing_0(response, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = crate::route_1::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v0, v1, v3);
        let v5 = crate::route_1::Next1 {
            s_0: v2,
            s_1: &v4,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a pavex::router::AllowedMethods,
            pavex::request::path::MatchedPathPattern,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex_tracing::RootSpan,
        next: fn(&'a pavex::router::AllowedMethods, &'b pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
